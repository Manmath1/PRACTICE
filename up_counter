//DESIGN CODE
module up_counter(clock, rst, out);
  
  //PARAMETERS
  parameter WIDTH = 4;
  
  //input ports
  input logic			  clock;
  input	logic			  rst;
  
  //output ports
  output logic[WIDTH-1:0] out;
  
  initial out <= 4'b0000;
  
  always @ (posedge clock) begin
    if(rst) out<= 0;
    else out <= out + 1;
  end //end of always

endmodule : up_counter  

//TESTBENCH CODE
module up_countertest();
  logic clock_tb, rst_tb; //inputs
  logic [3:0] out_tb; //outputs
  
  up_counter dut(.rst(rst_tb), .clock(clock_tb), .out(out_tb));
  
  //initialise signals
  initial begin 
    $dumpfile("test.vcd");
    $dumpvars(1,up_countertest);
    clock_tb = 0;
    rst_tb = 0;
  end  
  
  //clock stimulus
  always begin
    #15 clock_tb <= ~clock_tb;
  end

  //reset stimulus
  initial begin
    #55 rst_tb = 1;
    #30 rst_tb = 0;
    #500 $finish;
  end
endmodule: up_countertest
